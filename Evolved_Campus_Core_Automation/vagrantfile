# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'getoptlong'

opts = GetoptLong.new(
  [ '--vqfx-id', GetoptLong::OPTIONAL_ARGUMENT ]
)

id=2

opts.each do |opt, arg|
  case opt
    when '--vqfx-id'
      id=arg
  end
end

VAGRANTFILE_API_VERSION = "2"

## Define ports mapping to create a Full Mesh between all 4 vqfx
ports_map = { "1" => [1,2,3],
              "2" => [3,4,5],
              "3" => [1,4],
              "4" => [2,5]}

dataports_size = ports_map["#{id}"].count
puts dataports_size
puts ports_map["#{id.to_sym}"]

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    config.ssh.insert_key = false

    re_name  = ( "vqfx" + id.to_s ).to_sym
    pfe_name = ( "vqfx" + id.to_s + "-pfe" ).to_sym

    # ##############################
    # ## Packet Forwarding Engine ##
    # ##############################
    config.vm.define pfe_name do |vqfxpfe|
        vqfxpfe.ssh.insert_key = false
        vqfxpfe.vm.box = 'juniper/vqfx10k-pfe'

        # DO NOT REMOVE / NO VMtools installed
        vqfxpfe.vm.synced_folder '.', '/vagrant', disabled: true
       vqfxpfe.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "vqfx_internal_#{id}"

    end

    ##########################
    ## Routing Engine  #######
    ##########################
    config.vm.define re_name do |vqfx|
        vqfx.vm.hostname = "vqfx#{id}"
        vqfx.vm.box = 'juniper/vqfx10k-re'

        # DO NOT REMOVE / NO VMtools installed
        vqfx.vm.synced_folder '.', '/vagrant', disabled: true

        # Management port
        vqfx.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "vqfx_internal_#{id}"
        vqfx.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: "reserved_bridge"

        # Dataplane ports
        for seg_id in 0..dataports_size-1 do
           puts "**************ports_map:" + ports_map["#{id}"][seg_id].to_s
           vqfx.vm.network 'private_network', auto_config: false, nic_type: '82540EM', virtualbox__intnet: ports_map["#{id}"][seg_id].to_s
        end
    end

    config.vm.provision "ansible" do |ansible|
        ansible.limit = "all,localhost"
        ansible.playbook = "create_inventory.yml"
    end

end
